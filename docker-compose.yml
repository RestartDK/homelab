version: '3.9'

name: homelab

x-podman:
  in_pod: false

services:
  adguardhome:  
    image: adguard/adguardhome  
    container_name: adguardhome  
    restart: unless-stopped  
    labels:
      glance.name: AdGuard Home
      glance.icon: si:adguard
      glance.url: https://adguard.${DOMAIN}
      glance.category: infra
    networks:
      - caddynet
    env_file:
      - .env
    ports:  
      # Expose port 53 on TCP and UDP for DNS queries
      - "${ADGUARD_DNS_PORT}:${ADGUARD_DOCKER_DNS_PORT}/tcp"
      - "${ADGUARD_DNS_PORT}:${ADGUARD_DOCKER_DNS_PORT}/udp"

      # Expose port 80 on TCP for HTTP web interface
      - "${ADGUARD_HTTP_PORT}:${ADGUARD_DOCKER_HTTP_PORT}/tcp"

      # Expose port 3000 on TCP for AdGuard Home's API
      - "${ADGUARD_API_PORT}:${ADGUARD_DOCKER_API_PORT}/tcp"

    volumes:  
      - adguard_config:/opt/adguardhome/work:Z  
      - $PWD/adguard:/opt/adguardhome/conf:Z

  caddy:
    container_name: caddy
    hostname: caddy
    image: restartdk/caddy-cloudflare:latest
    restart: unless-stopped
    depends_on:
      - adguardhome
    networks:
      - caddynet
    ports:
      - "${CADDY_HTTP_PORT}:${CADDY_DOCKER_HTTP_PORT}"
      - "${CADDY_HTTPS_PORT}:${CADDY_DOCKER_HTTPS_PORT}"
      - "${CADDY_HTTPS_PORT}:${CADDY_DOCKER_HTTPS_PORT}/udp"
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - SERVER_URL=${SERVER_URL}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - CUP_DOCKER_PORT=${CUP_DOCKER_PORT}
      - GLANCE_PORT=${GLANCE_PORT}
      - GLANCE_DOCKER_PORT=${GLANCE_DOCKER_PORT}
      - KOMGA_PORT=${KOMGA_PORT}
      - KOMGA_DOCKER_PORT=${KOMGA_DOCKER_PORT}
      - JELLYFIN_PORT=${JELLYFIN_PORT}
      - JELLYFIN_DOCKER_PORT=${JELLYFIN_DOCKER_PORT}
      - JELLYSEERR_PORT=${JELLYSEERR_PORT}
      - JELLYSEERR_DOCKER_PORT=${JELLYSEERR_DOCKER_PORT}
      - RADARR_PORT=${RADARR_PORT}
      - RADARR_DOCKER_PORT=${RADARR_DOCKER_PORT}
      - SONARR_PORT=${SONARR_PORT}
      - SONARR_DOCKER_PORT=${SONARR_DOCKER_PORT}
      - PROWLARR_PORT=${PROWLARR_PORT}
      - PROWLARR_DOCKER_PORT=${PROWLARR_DOCKER_PORT}
      - SUWAYOMI_PORT=${SUWAYOMI_PORT}
      - SUWAYOMI_DOCKER_PORT=${SUWAYOMI_DOCKER_PORT}
      - NEXTCLOUD_PORT=${NEXTCLOUD_PORT}
      - NEXTCLOUD_DOCKER_PORT=${NEXTCLOUD_DOCKER_PORT}
      - COCKPIT_PORT=${COCKPIT_PORT}
      - DOKPLOY_HOST=${DOKPLOY_HOST}
      - DOKPLOY_UI_PORT=${DOKPLOY_UI_PORT}
      - OLLAMA_HOST=${OLLAMA_HOST}
      - OLLAMA_PORT=${OLLAMA_PORT}
    volumes:
      - $PWD/Caddyfile:/etc/caddy/Caddyfile:Z
      - caddy_data:/data:Z
      - caddy_config:/config:Z
    extra_hosts:
         - host.docker.internal:host-gateway
         - ollama:${OLLAMA_HOST}
         - dokploy:${DOKPLOY_HOST}
  glance:
    image: glanceapp/glance
    container_name: glance
    restart: unless-stopped
    networks:
      - caddynet
    env_file:
      - .env
    volumes:
      - ${GLANCE_PATH}/config:/app/config:Z
      - ${ASSETS_PATH}:/app/assets:Z
    ports:
      - ${GLANCE_PORT}:${GLANCE_DOCKER_PORT}

  komga:
    image: gotson/komga
    container_name: komga
    user: 1000:1000
    userns_mode: "keep-id:uid=1000,gid=1000"
    restart: unless-stopped
    labels:
      glance.name: Komga
      glance.icon: si:komga
      glance.url: https://komga.${DOMAIN}
      glance.category: media
    networks:
      - caddynet
    env_file:
      - .env
    volumes:
      - komga_config:/config:Z
      - media_manga:/data:z
    ports:
      - ${KOMGA_PORT}:${KOMGA_DOCKER_PORT}

  suwayomi:
    image: ghcr.io/suwayomi/suwayomi-server:stable
    container_name: suwayomi
    user: 1000:1000
    userns_mode: "keep-id:uid=1000,gid=1000"
    restart: on-failure:3
    networks:
      - caddynet
    environment:
      - TZ=Etc/UTC 
    volumes:
      - media_manga:/home/suwayomi/.local/share/Tachidesk/downloads:z
      - suwayomi_config:/home/suwayomi/.local/share/Tachidesk:z
    ports:
      - ${SUWAYOMI_PORT}:${SUWAYOMI_DOCKER_PORT}

  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    restart: "unless-stopped"
    user: "1000:1000"
    userns_mode: "keep-id:uid=1000,gid=1000"
    labels:
      glance.name: Jellyfin
      glance.icon: si:jellyfin
      glance.url: https://jellyfin.${DOMAIN}
      glance.category: media
    networks:
      - caddynet
    env_file:
      - .env
    volumes:
      - jellyfin_config:/config:Z
      - jellyfin_cache:/cache:Z
      - media_movies:/movies:z
      - media_tvshows:/tvshows:z
    devices: 
      - nvidia.com/gpu=0
    ports:
      - ${JELLYFIN_PORT}:${JELLYFIN_DOCKER_PORT}

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    user: "1000:1000"
    userns_mode: "keep-id:uid=1000,gid=1000"
    labels:
      glance.name: Radarr
      glance.icon: si:radarr
      glance.url: https://radarr.${DOMAIN}
      glance.category: media
    networks:
      - caddynet
    volumes:
      - radarr_config:/config:Z
      - media_movies:/data:z
      - media_downloads:/downloads:z
    ports:
      - ${RADARR_PORT}:${RADARR_DOCKER_PORT}

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    user: "1000:1000"
    userns_mode: "keep-id:uid=1000,gid=1000"
    labels:
      glance.name: Sonarr
      glance.icon: si:sonarr
      glance.url: https://sonarr.${DOMAIN}
      glance.category: media
    networks:
      - caddynet
    volumes:
      - sonarr_config:/config:Z
      - media_tvshows:/data:z
      - media_downloads:/downloads:z
    ports:
      - ${SONARR_PORT}:${SONARR_DOCKER_PORT}
  
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    user: "1000:1000"
    userns_mode: "keep-id:uid=1000,gid=1000"
    labels:
      glance.name: Prowlarr
      glance.icon: si:prowlarr
      glance.url: https://prowlarr.${DOMAIN}
      glance.category: media
    networks:
      - caddynet
    volumes:
      - prowlarr_config:/config:Z
      - media_downloads:/downloads:z
    ports:
      - ${PROWLARR_PORT}:${PROWLARR_DOCKER_PORT}

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    user: "1000:1000"
    userns_mode: "keep-id:uid=1000,gid=1000"
    labels:
      glance.name: qBittorrent
      glance.icon: si:qbittorrent
      glance.url: https://qbittorrent.${DOMAIN}
      glance.category: media
    networks:
      - caddynet
    env_file:
      - .env
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - WEBUI_PORT=${QBITTORRENT_DOCKER_PORT}
      - TORRENTING_PORT=${QBITTORRENT_TORRENT_PORT}
    volumes:
      - qbittorrent_config:/config:Z
      - media_downloads:/downloads:z
    ports:
      - ${QBITTORRENT_PORT}:${QBITTORRENT_DOCKER_PORT}
      - ${QBITTORRENT_TORRENT_PORT}:${QBITTORRENT_TORRENT_PORT}
      - ${QBITTORRENT_TORRENT_PORT}:${QBITTORRENT_TORRENT_PORT}/udp

  jellyseerr:
    image: fallenbagel/jellyseerr
    container_name: jellyseerr
    restart: unless-stopped
    # user: "1000:1000"
    # userns_mode: "keep-id"
    labels:
      glance.name: Jellyseerr
      glance.icon: si:jellyseerr
      glance.url: https://jellyseerr.${DOMAIN}
      glance.category: media
    networks:
      - caddynet
    environment:
      - LOG_LEVEL=debug
      - TZ=Europe/Paris
    ports:
      - ${JELLYSEERR_PORT}:${JELLYSEERR_DOCKER_PORT}
    volumes:
      - jellyseerr_config:/app/config:Z
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:5055/api/v1/status || exit 1
      start_period: 20s
      timeout: 3s
      interval: 15s
      retries: 3

  portainer:
    image: portainer/portainer-ce:lts
    container_name: portainer
    restart: always
    privileged: true
    networks:
      - caddynet
    security_opt:
      - label=disable
    ports:
      - ${PORTAINER_HTTP_PORT}:${PORTAINER_HTTP_DOCKER_PORT}
      - ${PORTAINER_HTTPS_PORT}:${PORTAINER_HTTPS_DOCKER_PORT}
    volumes:
      - /run/user/1000/podman/podman.sock:/var/run/docker.sock:Z
      - portainer_data:/data
    labels:
      glance.name: Portainer
      glance.icon: si:portainer
      glance.url: https://portainer.${DOMAIN}
      glance.category: infra
  # TODO: Add open webui here with the model dir correctly
  # open-webui:
  #   container_name: open-webui
  #   image: ghcr.io/open-webui/open-webui:main
  #   environment:
  #     - MODEL_DOWNLOAD_DIR=/models
  #     - OLLAMA_API_URL=http://ollama.chateauducipieres.com
  #     - LOG_LEVEL=debug
  #     - WEBUI_SECRET_KEY=your_secret_key_here # TODO: not added here
  #   volumes:
  #     - data:/data
  #     - models:/models
  #     - open-webui:/app/backend/data
  #   ports:
  #     - "8080:8080"
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: "5m"
  #       max-file: "2"
  #   depends_on:
  #     - ollama
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   networks:
  #     - nana-net
  #   restart: unless-stopped
  nextcloud:
    image: ghcr.io/nextcloud-releases/all-in-one:latest
    restart: unless-stopped
    container_name: nextcloud-aio-mastercontainer
    init: true
    labels:
      glance.name: Nextcloud
      glance.icon: si:nextcloud
      glance.url: https://nextcloud.${DOMAIN}
      glance.category: productivity
    security_opt: 
      - label=disable
    networks:
      - caddynet
    env_file:
      - .env
    ports:
      - ${NEXTCLOUD_PORT}:${NEXTCLOUD_DOCKER_PORT}
    environment:
        - APACHE_PORT=11000
        - APACHE_IP_BINDING=0.0.0.0
        - SKIP_DOMAIN_VALIDATION=true
        - APACHE_ADDITIONAL_NETWORK=caddynet
    volumes:
        - nextcloud_aio_mastercontainer:/mnt/docker-aio-config:Z
        - /run/user/1000/podman/podman.sock:/var/run/docker.sock:Z
  couchdb:
    image: couchdb:latest
    container_name: couchdb-for-ols
    user: 5984:5984
    environment:
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    volumes:
      - couchdb_data:/opt/couchdb/data:Z
      - couchdb_config:/opt/couchdb/etc/local.d:Z
    ports:
      - ${COUCHDB_PORT}:${COUCHDB_DOCKER_PORT}
    restart: unless-stopped
  
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_DOCKER_PORT}"
    volumes:
      - grafana_storage:/var/lib/grafana
    networks:
      - caddynet

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    networks:
      - caddynet
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - ${NODE_EXPORTER_PORT}

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - caddynet
    env_file:
      - .env
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:Z
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - ${PROMETHEUS_PORT}

networks:
  caddynet:
    external: true

volumes:
  caddy_data:
  caddy_config:
  komga_config:
  suwayomi_config:
  jellyfin_config:
  jellyfin_cache:
  jellyseerr_config:
  radarr_config:
  sonarr_config:
  prowlarr_config:
  qbittorrent_config:
  nextcloud:
  db:
  adguard_config:
  adguard_confdir:
  media_manga:
    external: true
  portainer_data:
  media_movies:
    external: true
  media_tvshows:
    external: true
  media_downloads:
    external: true
  nextcloud_aio_mastercontainer:
    external: true
  couchdb_data:
  couchdb_config:
  grafana_storage:
  prometheus_data:
